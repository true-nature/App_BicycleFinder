TWE-Lite 標準アプリケーション

＝＝＝ [v1.7] ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
● オプションビット２を新設
  bit0:3 ⇒ DI1-4 の内部プルアップを無効に設定
  bit4:7 ⇒ DO1-4 の内部プルアップを無効に設定

＝＝＝ [v1.6] ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
Date: 2014/06/24

● １秒おきの通信を受信したときに UART 出力を抑制するオプションの追加
● １秒おきの通信をしないような設定の追加
● PWM の出力反転設定・起動時のH/L設定の追加
● :コマンドの末尾のチェックサムを省略可能にした
● ADC の mV 変換式を正確にした
● 中継できる子機とマルチレベル中継に対応
  オプションビットの以下を設定可能
    0x8000 : 中継可能な子機
    0x1000 : 中継段数を２にする
    0x2000 : 中継段数を３にする (0x1000,2000 同時指定は不可)

＝＝＝ [v1.5] ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
Date: 2013/12/26

● ToCoStick 向けの定義を追加
ToCoStick では、デバイスの動作に合わせて定義を変更しています(USE_TOCOSTICK)
・アナログポートの入力を無視するオプションビット
・未設定状態のデフォルトを子機から親機にする
・IOポートの割り当てを変更 (DO1=赤LED=DIO16, PWM1=黄LED=SPIMISO)

● 実験的な実装を Experimental.h に集約
   本ファイル上で以下の定義を #define にする事で、振る舞いを微調整できます。
   詳細は Master.c のコード中該当コードを参照してください。

SET_DO_ON_SLEEP
  Sleep 中に IO の出力状態を設定する
    DO0,1を Sleep 中は Hi, 稼働中は Lo

USE_BROWN_OUT_DETECT
  BROWNOUT 検出時にリセットする。

USE_INITIAL_PORT_ON
  電源投入時に一定時間ポートをONにする


USE_I2C_PORT_AS_CHANNEL_SET
  I2Cポートを入力として利用し、かつチャネル切り替えに使用する

  両方のピンが HI の場合は、インタラクティブモードの設定となり、
  それ以外の場合は、以下に定義している CHMASK_1-3 に切り替わる。

USE_I2C_PORT_AS_PWM_SPECIAL
  I2Cポートを入力として利用し、かつ PWM の特殊制御に使用する
  (USE_I2C_PORT_AS_CHANNEL_SET と両方定義すると、チャネル切り替えと
   PWM 制御パターンを同時に切り替える)

USE_PWM4_AS_BAT_MONITOR
  AI4 の変わりに電源電圧を読み出して送信する。
  2.5V 以上 (PWM=0%) 2.5V 以下 (PWM=50%), 2.3V以下 (PWM=100%)

USE_I2C_LCD_TEST_CODE
  I2C LCD モジュールテスト用のコード
    本定義が実装されると、I2C 接続の LCD デバイスにテスト文字を表示する
    - IO入力を受け取った時そのボタンに応じたメッセージを表示
    - インタラクティブモードで 1-4 に対応してメッセージを表示

＝＝＝ [v1.4] ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
● v1.3.10 をベースに ToCoStick 向けの修正を加えたブランチ

＝＝＝ [v1.3] ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
Date: 2013/07/30

● 低レイテンシモードを追加しました。
低レイテンシモードは、DI の入力で Hi->Lo (ボタン押下) 時に、いち早く無線パケット
送信を行い相手側に状態変化を通知する目的で利用します。同時に Lo->Hi (ボタン押上)時に
もできるだけ遅延を縮小します。
通常は、チャタリングの抑制を目的として、入力検出は比較的長めの期間(20ms以上)としています。

・低レイテンシモードは、インタラクティブモードで o) オプション設定にて、1ビット目を
  1 に設定します。(0x00000001)

・通常の遅延は30～70msです。IO状態の確定のための待ち時間に加えソフトウェア内の制御周期
  およびパケット衝突を避けるためのタイミング制御が関係します。上記に伴いスリープ駆動時
  の処理も短縮化されます。
・低レイテンシモードでは、ToCoNet の制御周期を 4ms から 1ms としており、通常の DI
  状態判定も、4ms 毎に 5回連続同値 から 1ms 毎に5回連続と短くしています。
・Hi->Lo ボタン押下に限って、IOの割り込みにより無線パケットを送信します。ボタン押し下げ
  から相手方の DO が Lo になるまでの遅延は、電波障害が無ければ代表的には 5ms 前後となり
  ます。
・Lo->Hi 押し上げ時には、代表的には 10ms 前後となります。ただし、Lo->Hi 時には、チャタ
  リングによる Hi->Lo 割り込みが発生し Lo 状態が伝達されることがあります。
・遅延時間は無線パケット、チャタリングの送受信失敗などの要因で大きくなります。

● スリープモード
・スリープ１０秒モード (mode7) のスリープ周期設定を０秒と設定すると、タイマーによる
  起床は行わず、DI入力 (Hi>Lo) による割り込み起床のみとして稼働します。

● ADC変化による送信を無効にするオプションを追加しました。
  インタラクティブモードで o) オプション設定にて、5ビット目を 1 に設定します。
  (0x00000010)

  ADC と PWM を利用しない場合、ADC未入力設定を行うための Vcc 設定を行う必要が
  あります。結線しないと ADC の入力値は不定になり、常に変化し、電波送信のトリガー
  になり、連続的にパケットが送信され無線帯域を占有します。

  本オプションを設定し、上記 Vcc 結線を省略しても、ADCの入力が変化してもパケット
  送信しません。


● IOがLoになっている間、連続的にパケットを送信するモードを追加しました。
  インタラクティブモードで o) オプション設定にて、9ビット目を 1 に設定します。
  (0x00000100)

  受信側ではパケットが途絶えて 500ms 経過すると自動的に Hi に戻します。
  この設定は、例えばボタンを押している間だけ何か動作させます。万が一、電波が
  途切れるような場合には、自動的に動作を停止します。

  ボタン押下(Lo)検知中は秒間３２パケットを送信し続けます。ボタン押上(Hi)検知
  後は、一定期間 Lo 状態のパケットを送信し続けて終了します。

● PWM 駆動周波数
・64000Hz まで設定可能になりました。

● インタラクティブモード 'V'
・アプリケーションのバージョン番号
・ToCoNetの各ライブラリのバージョン番号
・稼働時間
  などが表示されます。

● ID=122
  ID=122 と設定すると中継器として振舞います。

＝＝＝ [v1.2] ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
Date: 2013/07/03
Ver1.2.1 では以下の修正を行いました。

    I2Cの処理を追加しました。
    UART電文の処理を改善しました。

● I2Cの処理を追加しました。

I2C のデバイスにアクセスできる UART コマンドを追加しました。この機能で出来るのは例えばI2C対応のセンサーから
値を読む等の数バイトの送信、または数バイトの受信です。連続的に処理される複雑なコマンド群の処理には対応していません。

▼ 書式
 - 入力フォーマット
   1: OCTET: 無線デバイスのアドレス (0xDB: 自分自身, 0x00 ～ 0x7F, 0x00:親機, 0x78: 全子機)
   2: OCTET: 0x88

   3: OCTET: 要求番号(応答メッセージにそのまま出力される識別子)
   4: OCTET: コマンド (0x1: 書き込み, 0x2: 読み出し)
   5: OCTET: I2Cアドレス (1010100 なら 0x54)
   6: OCTET: I2Cコマンド (最初のコマンドバイト)
   7: OCTET: データサイズ (無い時は 0)
   8: OCTET[N]: データ (データサイズが0のときは、本フィールドは無し)
   9: OCTET: チェックサム

:DB88010123230055
 ^1^2^3^4^5^6^7^9

UART 接続したモジュールに対し (1)、I2C の処理を行う(2)。応答確認用の値(3)は
0x01 で、書き込み(4, 0x01) を実行する。スレーブデバイスのアドレス(5) は 0x23、
続くコマンド(6) も 0x23を送付する。追加的なデータ転送 (7, 8) は無し。
UART コマンドのチェックサム(9) は 0x55 である。

:78880101232300B8
 ^1^2^3^4^5^6^7^8

上記 I2C コマンドを 0x78 アドレスの子機に送付する。
※ 0x78 アドレスの場合複数子機が電波範囲にいる場合は、全子機が応答する。
　　特定子機を指定したい場合は 1 ～ 100 のアドレスを設定にて割り付ける。

 ― 出力フォーマット
   OCTET: 無線デバイスのアドレス
   OCTET: 0x89

   OCTET: 要求番号
   OCTET: コマンド (0x1: Write, 0x2: Read)
   OCTET: 0:FAIL, 1:SUCCESS
   OCTET: データサイズ (無い時は 0)
   OCTET[N]: データ (データサイズが0のときは、本フィールドは無し)

送信と同様の応答が戻ります。

▼ 実行例 (SHT21 温湿度センサー)
レジスタの読み込みコマンド(一括)
  E6コマンド後に読み出し
    :7888AB0440E6012A
  レジスタ値は 0x3A
    :7889AB0401013A14

レジスタ書き込み
  E6コマンド＋１バイト(0xBB)書き込み
    :7888AB0140E601BB72
  成功
    :7889AB01010052

温度測定
  温度測定開始
    :7888AB0140F30021
  応答（成功）
    :7889AB01010052

  ３バイト読み出し
    :7888AB0240000310
  応答 6E107B --> (0x6E10*17572+32768)/65536-4685=2870=28.70℃
    :7889AB0201036E107B55

湿度測定
  湿度測定開始
    :7888AB0140F5001F
  応答（成功）
    :7889AB01010052

  ３バイト読み出し
    :7888AB0240000310
  応答 829A18 --> (0x829A*12500+32768)/65536-600=5777=57.77%
    :7889AB020103829A181A

● UART電文の処理を改善しました。

    受信時の先頭アドレスは、送信先アドレスから送信元のアドレスに変更しました。アドレス表記を統一するためです。
    連続した送信コマンドに対して、直前のコマンド処理が完了するまで待つようにしました。これまでのバージョンでは
    連続的にコマンドを入力しても、最初のコマンド処理が終わるまでは失敗扱いとして何も起きませんでした。
    送信がブロックされるタイミングが有り、これを修正しました。

  ※ 専ら UART 通信のみを行う場合は、専用ファームウェアの使用を推奨します。

● その他
    IDを121に設定すると、親機として振る舞います。(M1=LOと等価)

＝＝＝ [v1.1.2] ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
[v1.1.2] 2013/06/27
  - UART メッセージ伝送の中継が重複しないようになりました。

  - コマンド 0x80 を送信する事で、相手先の IO 状態を変更できるようになりました。
    電文形式
      1バイト : 宛先アドレス (0x00: 親機, 0x01 ～ 0x64: 子機ID指定, 0x78: 全子機)
                親機から子機、または子機から親機への伝送に限ります。
      1バイト : コマンド番号 (0x80 固定)
      1バイト : 書式バージョン (0x01 固定, 将来のための拡張)
      1バイト : IO状態
                b7..b3b2b1b0とした場合 b0/b1/b2/b3 が DO1/DO2/DO3/DO4)の設定値と
                なり、0がHi、1がLoとなります。設定を有効化するために、続く IO状
                態マスクのビットが1に設定します。
      1バイト : IO状態設定マスク
                b7..b3b2b1b0とした場合 b0/b1/b2/b3 が DO1/DO2/DO3/DO4)の設定値と
                なり、0が対応するDOを設定しない、1で設定します。
      2バイト : PWM1の設定値です。
                0(0%)～1024(100%)または0xFFFF(設定しない)を与えます。
      2バイト : PWM2の設定値です。
      2バイト : PWM3の設定値です。
      2バイト : PWM4の設定値です。
      1バイト : チェックサムです。

    例
      :7880010F0F0380030002800200DF
      全DOをLOに設定し、PWMのDUTY比を 0x300, 0x300, 0x280, 0x200 に設定します。

  - フラッシュメモリをクリアする操作を追加しました。
    電源投入前に
      ・DO1 を LED に接続
      ・M2/M3/DI4/SDA を GND に設定 (M1 は Hiまたはオープンです)
    電源を投入する。数秒間 DO1 の LED が点滅し、その後 DO1 の点滅間隔が遅く
    なります。遅くなった時点でフラッシュの値が初期化されます。電源を切って
    ください。

  - BPS ピンを GND に落としたときの UART の設定を変更できるようになりました。
    インタラクティブモードにて b キーでボーレート、p キーでパリティを設定でき
    ます。

      b: set UART baud (38400)
      p: set parity (N)

    ボーレートは 9600/19200/38400/57600/115200/230400 が設定可能です。
    他の値も設定可能ですが、誤差等はオシロスコープ等を用いて検証した上、
    利用ください。

    パリティは N: 無し O: Odd=奇数 E: Even:偶数 を設定します。

    ストップビットは１固定。ハードウェアフローは設定不可です。

  - PWM の周波数を変更できるようになりましたあ。
    インタラクティブモードにて p キーで設定可能です。

     z: set PWM HZ (1000)

    設定値は 1～12800 まで選択できます。

  - システムの基本タイマーの周波数を変更できるようになりました。
    インタラクティブモードにて x キーで設定可能です。
    ※ 通常は設定しないでください。

     x: set system HZ (250)

    設定値は 500, 1000 が選択できます。内部の動作が変わりますが、
    外部から見たアプリケーションの振る舞いは同じです。

＝＝＝ [v1.0.2] ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
Date: 2013/06/07

  - 最初のバージョン

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
